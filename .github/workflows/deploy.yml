name: ci-cd

on:
  push:
    branches: [main]
  workflow_dispatch: {}

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, intl, xml, ctype, dom, fileinfo, pdo, sqlite3, pdo_sqlite, pgsql, gd, curl, redis
          coverage: none

      - name: Composer install (dev)
        run: composer install --prefer-dist --no-progress

      - name: Prepare env for tests (app key)
        run: |
          cp .env.example .env
          php artisan key:generate
        env:
          APP_ENV: testing

      - name: Lint (Pint)
        run: vendor/bin/pint --test || true

      - name: Static analysis (Larastan)
        run: vendor/bin/phpstan analyse --no-progress --level=max || true

      - name: Tests (Pest or PHPUnit)
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: ':memory:'
        run: vendor/bin/pest || php artisan test

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build assets (non-blocking)
        run: |
          npm ci --no-audit --no-fund || npm install --no-audit --no-fund
          npm run build || true

      - name: Remove cached bootstrap files
        run: rm -f bootstrap/cache/{config.php,packages.php,services.php} || true

      - name: Production deps only
        run: composer install --no-dev --prefer-dist --no-progress --no-scripts

      - name: Create artifact
        run: |
          tar -czf release.tgz \
            app bootstrap config database public resources routes vendor artisan composer.json composer.lock

      - uses: actions/upload-artifact@v4
        with:
          name: release
          path: release.tgz

  deploy_prod:
    needs: [build_test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: release
          path: .

      - name: Upload & deploy to droplet
        env:
          HOST: ${{ secrets.DROPLET_HOST }}
          USER: ${{ secrets.DROPLET_USER }}
          KEY:  ${{ secrets.DROPLET_SSH_KEY }}
        run: |
          set -euxo pipefail

          # SSH key may contain literal \n; normalize to real newlines.
          echo "$KEY" | sed 's/\\n/\n/g' > key
          chmod 600 key

          # Quick preflight (helps fail fast on auth issues)
          ssh -i key -o BatchMode=yes -o StrictHostKeyChecking=no "$USER@$HOST" 'whoami && uname -a'

          # Upload artifact
          scp -i key -o StrictHostKeyChecking=no release.tgz "$USER@$HOST:/tmp/release.tgz"

          # Remote deploy
          ssh -i key -o StrictHostKeyChecking=no "$USER@$HOST" bash -s <<'SH'
          set -euo pipefail

          BASE=/var/www/memory-vault
          REL=$BASE/releases
          SHARED=$BASE/shared
          TS=$(date +%Y%m%d_%H%M%S)
          DST=$REL/$TS

          echo "==> Ensure base structure"
          sudo mkdir -p "$REL" "$SHARED"/{storage/{app,framework/{cache,sessions,views},logs},database}
          sudo touch "$SHARED/database/database.sqlite"
          sudo chown -R www-data:www-data "$SHARED"
          sudo chmod -R ug+rwX "$SHARED"

          echo "==> Require existing .env in shared"
          test -f "$SHARED/.env" || { echo "ERROR: $SHARED/.env is missing. Create it first."; exit 1; }

          echo "==> Unpack new release"
          sudo mkdir -p "$DST"
          sudo tar -xzf /tmp/release.tgz -C "$DST"
          sudo rm -f /tmp/release.tgz

          echo "==> Link shared resources"
          sudo ln -sfn "$SHARED/.env"     "$DST/.env"
          sudo rm -rf  "$DST/storage"   && sudo ln -sfn "$SHARED/storage"  "$DST/storage"
          sudo rm -rf  "$DST/database"  && sudo ln -sfn "$SHARED/database" "$DST/database"

          # Guard Pail in prod (harmless if not present)
          sudo sed -i 's/->withPail();/\/\/ ->withPail();/' "$DST/bootstrap/app.php" || true

          echo "==> Clear caches"
          sudo -u www-data php "$DST/artisan" config:clear || true
          sudo -u www-data php "$DST/artisan" route:clear  || true
          sudo -u www-data php "$DST/artisan" view:clear   || true

          echo "==> Ensure APP_KEY exists (do not overwrite if present)"
          if ! grep -q 'APP_KEY=base64:' "$SHARED/.env"; then
            sudo -u www-data php "$DST/artisan" key:generate --force
          fi

          echo "==> Migrate + warm caches"
          sudo -u www-data php "$DST/artisan" migrate --force || true
          sudo -u www-data php "$DST/artisan" config:cache route:cache view:cache || true

          echo "==> Switch current"
          sudo ln -sfn "$DST" "$BASE/current"

          echo "==> Reload PHP-FPM and queues"
          sudo systemctl reload php8.4-fpm || sudo systemctl reload php8.3-fpm || true
          sudo supervisorctl restart mv-queue-default: mv-queue-media: mv-horizon: || true

          echo "==> Keep only 2 latest releases"
          cd "$REL" && ls -1t | tail -n +3 | xargs -r sudo rm -rf

          echo "==> Disk usage"
          df -h "$BASE"
          SH