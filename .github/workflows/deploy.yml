name: ci-cd
on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, intl, xml, ctype, dom, fileinfo, pdo, pgsql, gd, curl, redis
          coverage: none

      - name: Composer install (dev)
        run: composer install --prefer-dist --no-progress

      - name: Prepare env for tests (app key)
        run: |
          cp .env.example .env
          php artisan key:generate
        env:
          APP_ENV: testing

      - name: Lint (Pint)
        run: vendor/bin/pint --test || true

      # Larastan not installed in fresh app; keep non-blocking
      - name: Static analysis (Larastan)
        run: vendor/bin/phpstan analyse --no-progress --level=max || true

      - name: Tests (Pest or PHPUnit)
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: ':memory:'
        run: vendor/bin/pest || php artisan test

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build assets (non-blocking)
        run: |
          npm ci --no-audit --no-fund || npm install --no-audit --no-fund
          npm run build || true

      - name: Remove cached bootstrap files (avoid stale dev providers)
        run: rm -f bootstrap/cache/{config.php,packages.php,services.php} || true

      - name: Production deps only
        run: composer install --no-dev --prefer-dist --no-progress --no-scripts

      - name: Create artifact
        run: |
          tar -czf release.tgz \
            app bootstrap config database public/build resources routes vendor artisan composer.json composer.lock

      - uses: actions/upload-artifact@v4
        with:
          name: release
          path: release.tgz

  deploy_prod:
    needs: [build_test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: release
          path: .

      - name: Upload & deploy to droplet
        env:
          HOST: ${{ secrets.DROPLET_HOST }}
          USER: ${{ secrets.DROPLET_USER }}
          KEY:  ${{ secrets.DROPLET_SSH_KEY }}
        run: |
          echo "$KEY" > key && chmod 600 key
          scp -i key -o StrictHostKeyChecking=no release.tgz $USER@$HOST:/tmp/release.tgz
          ssh -i key -o StrictHostKeyChecking=no $USER@$HOST bash -s <<'SH'
            set -euo pipefail
            TS=$(date +%Y%m%d_%H%M%S)
            BASE=/var/www/memory-vault
            REL=$BASE/releases/$TS
            mkdir -p "$REL"
            tar -xzf /tmp/release.tgz -C "$REL"
            rm /tmp/release.tgz

            ln -sfn $BASE/shared/.env "$REL/.env"
            mkdir -p $BASE/shared/storage
            rm -rf "$REL/storage"
            ln -sfn $BASE/shared/storage "$REL/storage"

            cd "$REL"
            php artisan storage:link || true
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan migrate --force || true

            ln -sfn "$REL" "$BASE/current"
systemctl reload php-fpm || systemctl reload php8.4-fpm || true
supervisorctl restart mv-queue-default: mv-queue-media: mv-horizon: || true

# Keep only the latest 2 releases (current + 1 previous)
cd $BASE/releases
ls -1t | tail -n +3 | xargs -r rm -rf
          SH
